/**
 * attest.ink - Enhanced Content Attribution Badge System
 * JavaScript library for adding animated attribution badges to content
 */

const AttestInk = (function() {
    // Badge URLs - update these to your actual deployment URLs
    const badges = {
        human: 'assets/badges/human-generated.svg',
        ai: 'assets/badges/ai-generated.svg',
        claude: 'assets/badges/claude-generated.svg',
        chatgpt: 'assets/badges/chatgpt-generated.svg',
        gemini: 'assets/badges/gemini-generated.svg',
        midjourney: 'assets/badges/midjourney-generated.svg',
        dalle: 'assets/badges/dalle-generated.svg'
    };

    // Badge labels for accessibility and tooltips
    const badgeLabels = {
        human: 'Human Generated',
        ai: 'AI Generated',
        claude: 'Claude AI Generated',
        chatgpt: 'ChatGPT Generated',
        gemini: 'Gemini Generated',
        midjourney: 'Midjourney Generated',
        dalle: 'DALL-E Generated'
    };

    // Add a badge to a specified element with enhanced animation
    function addBadge(type, selector, options = {}) {
        // Validate badge type
        if (!badges[type]) {
            console.error(`Invalid badge type: ${type}. Use 'human', 'ai', 'claude', 'chatgpt', 'gemini', 'midjourney', or 'dalle'.`);
            return;
        }

        // Find elements
        const elements = document.querySelectorAll(selector);
        if (elements.length === 0) {
            console.error(`No elements found matching selector: ${selector}`);
            return;
        }

        // Parse options and set defaults
        const position = options.position || 'top-right';
        const size = options.size || 'medium';
        const style = options.style || 'default';
        
        // Size mapping
        const sizeMap = {
            small: '24px',
            medium: '30px',
            large: '36px'
        };
        
        // Position mapping
        const positionMap = {
            'top-left': { top: '-15px', left: '10px', right: 'auto', bottom: 'auto' },
            'top-right': { top: '-15px', right: '10px', left: 'auto', bottom: 'auto' },
            'bottom-left': { bottom: '-15px', left: '10px', top: 'auto', right: 'auto' },
            'bottom-right': { bottom: '-15px', right: '10px', top: 'auto', left: 'auto' },
            'center-top': { top: '-15px', left: '50%', transform: 'translateX(-50%)', right: 'auto', bottom: 'auto' },
            'center-bottom': { bottom: '-15px', left: '50%', transform: 'translateX(-50%)', top: 'auto', right: 'auto' }
        };
        
        // Style mapping
        const styleMap = {
            default: { opacity: '1', filter: 'drop-shadow(0 2px 3px rgba(0, 0, 0, 0.1))' },
            subtle: { opacity: '0.85', filter: 'none' },
            prominent: { opacity: '1', filter: 'drop-shadow(0 3px 5px rgba(0, 0, 0, 0.2))' }
        };
        
        // Get position, size and style settings
        const positionSettings = positionMap[position] || positionMap['top-right'];
        const sizeValue = sizeMap[size] || sizeMap.medium;
        const styleSettings = styleMap[style] || styleMap.default;

        elements.forEach(element => {
            // Don't add if badge already exists
            if (element.querySelector('.attest-badge-container')) {
                return;
            }

            // Set position relative if not already set
            const computedStyle = window.getComputedStyle(element);
            if (computedStyle.position === 'static') {
                element.style.position = 'relative';
            }

            const badgeContainer = document.createElement('div');
            badgeContainer.className = 'attest-badge-container';
            badgeContainer.style.position = 'absolute';
            badgeContainer.style.zIndex = '999';
            badgeContainer.style.opacity = '0';
            badgeContainer.style.transition = 'opacity 0.4s ease, transform 0.4s ease';
            
            // Apply position settings
            Object.keys(positionSettings).forEach(key => {
                badgeContainer.style[key] = positionSettings[key];
            });
            
            // Transform settings for entrance animation
            if (position.includes('top')) {
                badgeContainer.style.transform = badgeContainer.style.transform 
                    ? badgeContainer.style.transform + ' translateY(10px)'
                    : 'translateY(10px)';
            } else if (position.includes('bottom')) {
                badgeContainer.style.transform = badgeContainer.style.transform 
                    ? badgeContainer.style.transform + ' translateY(-10px)'
                    : 'translateY(-10px)';
            }
            
            // Create tooltip
            const tooltip = document.createElement('div');
            tooltip.className = 'attest-badge-tooltip';
            tooltip.textContent = `${badgeLabels[type]} content`;
            tooltip.style.position = 'absolute';
            tooltip.style.backgroundColor = 'rgba(0, 0, 0, 0.8)';
            tooltip.style.color = 'white';
            tooltip.style.padding = '5px 8px';
            tooltip.style.borderRadius = '4px';
            tooltip.style.fontSize = '12px';
            tooltip.style.whiteSpace = 'nowrap';
            tooltip.style.opacity = '0';
            tooltip.style.transition = 'opacity 0.3s ease, transform 0.3s ease';
            tooltip.style.pointerEvents = 'none';
            
            // Position tooltip based on badge position
            if (position.includes('top')) {
                tooltip.style.bottom = '100%';
                tooltip.style.marginBottom = '5px';
                tooltip.style.transform = 'translateY(-5px)';
            } else {
                tooltip.style.top = '100%';
                tooltip.style.marginTop = '5px';
                tooltip.style.transform = 'translateY(5px)';
            }
            
            if (position.includes('left')) {
                tooltip.style.left = '0';
            } else if (position.includes('right')) {
                tooltip.style.right = '0';
            } else {
                tooltip.style.left = '50%';
                tooltip.style.transform = tooltip.style.transform 
                    ? tooltip.style.transform + ' translateX(-50%)'
                    : 'translateX(-50%)';
            }

            const badgeImg = document.createElement('img');
            badgeImg.src = badges[type];
            badgeImg.alt = badgeLabels[type];
            badgeImg.title = badgeLabels[type];
            badgeImg.className = `attest-badge attest-${type}-badge`;
            badgeImg.style.height = sizeValue;
            badgeImg.style.display = 'block';
            badgeImg.style.filter = styleSettings.filter;
            badgeImg.style.opacity = styleSettings.opacity;
            badgeImg.style.transition = 'transform 0.3s ease, filter 0.3s ease';
            
            // Add hover effect
            badgeContainer.addEventListener('mouseenter', () => {
                badgeImg.style.transform = 'scale(1.05)';
                badgeImg.style.filter = 'drop-shadow(0 3px 6px rgba(0, 0, 0, 0.15))';
                tooltip.style.opacity = '1';
                tooltip.style.transform = position.includes('top') 
                    ? 'translateY(0)' + (position === 'center-top' ? ' translateX(-50%)' : '')
                    : 'translateY(0)' + (position === 'center-bottom' ? ' translateX(-50%)' : '');
            });
            
            badgeContainer.addEventListener('mouseleave', () => {
                badgeImg.style.transform = '';
                badgeImg.style.filter = styleSettings.filter;
                tooltip.style.opacity = '0';
                tooltip.style.transform = position.includes('top') 
                    ? 'translateY(-5px)' + (position === 'center-top' ? ' translateX(-50%)' : '')
                    : 'translateY(5px)' + (position === 'center-bottom' ? ' translateX(-50%)' : '');
            });

            badgeContainer.appendChild(badgeImg);
            badgeContainer.appendChild(tooltip);
            element.appendChild(badgeContainer);
            
            // Trigger animation after a small delay
            setTimeout(() => {
                badgeContainer.style.opacity = styleSettings.opacity;
                
                // Reset transform while keeping any translateX if present
                if (position === 'center-top' || position === 'center-bottom') {
                    badgeContainer.style.transform = 'translateX(-50%)';
                } else {
                    badgeContainer.style.transform = '';
                }
                
            }, 50);
        });
    }

    // Remove badge from element with enhanced animation
    function removeBadge(selector) {
        const elements = document.querySelectorAll(selector);
        
        elements.forEach(element => {
            const badgeContainer = element.querySelector('.attest-badge-container');
            if (badgeContainer) {
                // Get current position to determine animation direction
                const computedStyle = window.getComputedStyle(badgeContainer);
                const hasTopPosition = computedStyle.top !== 'auto' && computedStyle.top !== '0px';
                const transformValue = hasTopPosition ? 'translateY(-10px)' : 'translateY(10px)';
                
                // Animate out
                badgeContainer.style.opacity = '0';
                
                // Apply transform while preserving any translateX if present
                if (computedStyle.transform.includes('translateX')) {
                    const translateXMatch = computedStyle.transform.match(/translateX\([^)]+\)/);
                    if (translateXMatch) {
                        badgeContainer.style.transform = `${translateXMatch[0]} ${transformValue}`;
                    } else {
                        badgeContainer.style.transform = transformValue;
                    }
                } else {
                    badgeContainer.style.transform = transformValue;
                }
                
                // Remove after animation completes
                setTimeout(() => {
                    badgeContainer.remove();
                }, 400);
            }
        });
    }
    
    // Set badge style dynamically
    function setBadgeStyle(selector, styleOptions) {
        const elements = document.querySelectorAll(selector);
        
        elements.forEach(element => {
            const badgeContainer = element.querySelector('.attest-badge-container');
            if (badgeContainer) {
                const badgeImg = badgeContainer.querySelector('.attest-badge');
                
                if (badgeImg) {
                    // Apply style options
                    if (styleOptions.size) {
                        const sizeMap = {
                            small: '24px',
                            medium: '30px',
                            large: '36px'
                        };
                        badgeImg.style.height = sizeMap[styleOptions.size] || styleOptions.size;
                    }
                    
                    if (styleOptions.opacity !== undefined) {
                        badgeImg.style.opacity = styleOptions.opacity;
                        badgeContainer.style.opacity = styleOptions.opacity;
                    }
                    
                    if (styleOptions.filter) {
                        badgeImg.style.filter = styleOptions.filter;
                    }
                    
                    // Apply position if provided
                    if (styleOptions.position) {
                        const positionMap = {
                            'top-left': { top: '-15px', left: '10px', right: 'auto', bottom: 'auto' },
                            'top-right': { top: '-15px', right: '10px', left: 'auto', bottom: 'auto' },
                            'bottom-left': { bottom: '-15px', left: '10px', top: 'auto', right: 'auto' },
                            'bottom-right': { bottom: '-15px', right: '10px', top: 'auto', left: 'auto' },
                            'center-top': { top: '-15px', left: '50%', transform: 'translateX(-50%)', right: 'auto', bottom: 'auto' },
                            'center-bottom': { bottom: '-15px', left: '50%', transform: 'translateX(-50%)', top: 'auto', right: 'auto' }
                        };
                        
                        const positionSettings = positionMap[styleOptions.position];
                        if (positionSettings) {
                            Object.keys(positionSettings).forEach(key => {
                                badgeContainer.style[key] = positionSettings[key];
                            });
                        }
                    }
                }
            }
        });
    }

    // Public API
    return {
        addBadge,
        removeBadge,
        setBadgeStyle,
        getBadgeUrl: type => badges[type]
    };
})();